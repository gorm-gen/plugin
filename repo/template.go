package repo

func (r *Repo) baseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"errors"
	"sync"

	"gorm.io/gorm"

	"{{.GormDBVarPkg}}"

	"{{.GenQueryPkg}}"
)

var once sync.Once
var q *query.Query

func GetQuery() *query.Query {
	once.Do(func() {
		q = query.Use({{.GormDBVar}})
	})
	return q
}

func IsRealErr(err error) bool {
	return !errors.Is(err, gorm.ErrRecordNotFound) && !errors.Is(err, context.DeadlineExceeded) && !errors.Is(err, context.Canceled)
}
`
}

func (r *Repo) genBaseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"{{.ZapVarPkg}}"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type {{.StructName}} struct {
	q      *query.Query
	logger *zap.Logger
}

func New() *{{.StructName}} {
	return &{{.StructName}}{
		q:      repositories.GetQuery(),
		logger: global.Logger,
	}
}

type Option func(*{{.StructName}}) gen.Condition

func WithID(id int64) Option {
	return func({{.Abbr}} *{{.StructName}}) gen.Condition {
		return {{.Abbr}}.q.{{.StructName}}.ID.Eq(id)
	}
}

type UpdateOption func(*{{.StructName}}) field.AssignExpr
`
}

func (r *Repo) genDoTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"errors"
	"sync"

	"gorm.io/gorm"

	"{{.GormDBVarPkg}}"

	"{{.GenQueryPkg}}"
)

var once sync.Once
var q *query.Query

func GetQuery() *query.Query {
	once.Do(func() {
		q = query.Use({{.GormDBVar}})
	})
	return q
}

func IsRealErr(err error) bool {
	return !errors.Is(err, gorm.ErrRecordNotFound) && !errors.Is(err, context.DeadlineExceeded) && !errors.Is(err, context.Canceled)
}
`
}
