package repo

func (r *Repo) baseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"errors"
	"sync"

	"gorm.io/gorm"

	"{{.GormDBVarPkg}}"

	"{{.GenQueryPkg}}"
)

var once sync.Once
var q *query.Query

func GetQuery() *query.Query {
	once.Do(func() {
		q = query.Use({{.GormDBVar}})
	})
	return q
}

func IsRealErr(err error) bool {
	return !errors.Is(err, gorm.ErrRecordNotFound) && !errors.Is(err, context.DeadlineExceeded) && !errors.Is(err, context.Canceled)
}
`
}

func (r *Repo) genBaseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"{{.ZapVarPkg}}"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type {{.StructName}} struct {
	q      *query.Query
	logger *zap.Logger
}

func New() *{{.StructName}} {
	return &{{.StructName}}{
		q:      {{.RepoPkgName}}.GetQuery(),
		logger: global.Logger,
	}
}

type Option func(*{{.StructName}}) gen.Condition

func WithID(id int64) Option {
	return func({{.Abbr}} *{{.StructName}}) gen.Condition {
		return {{.Abbr}}.q.{{.StructName}}.ID.Eq(id)
	}
}

type UpdateOption func(*{{.StructName}}) field.AssignExpr

type OrderOption func(*{{.StructName}}) field.Expr

func OrderIDDesc() OrderOption {
	return func({{.Abbr}} *{{.StructName}}) field.Expr {
		return {{.Abbr}}.q.{{.StructName}}.ID.Desc()
	}
}

type RelationOption func(*{{.StructName}}) field.RelationField

func RelationAll() RelationOption {
	return func({{.Abbr}} *{{.StructName}}) field.RelationField {
		return field.Associations
	}
}
`
}

func (r *Repo) genCountTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type CountData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	conditionOpts []Option
}

func NewCountData() *CountData {
	return &CountData{
		conditionOpts: make([]Option, 0),
	}
}

func (c *CountData) SetTx(tx *query.Query) *CountData {
	c.tx = tx
	c.qTx = nil
	return c
}

// SetQueryTx 设置为手动事务
func (c *CountData) SetQueryTx(tx *query.QueryTx) *CountData {
	c.qTx = tx
	c.tx = nil
	return c
}

func (c *CountData) SetConditionOpts(opts ...Option) *CountData {
	c.conditionOpts = opts
	return c
}

// Count 获取数据总条数
func ({{.Abbr}} *{{.StructName}}) Count(ctx context.Context, cd *CountData) (int64, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if cd.tx != nil {
		{{.Abbr}}q = cd.tx.{{.StructName}}
	}
	if cd.qTx != nil {
		{{.Abbr}}q = cd.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	errFields := make([]zap.Field, 0)
	if len(cd.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(cd.conditionOpts))
		for _, opt := range cd.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	count, err := {{.Abbr}}r.Count()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Count】失败", errFields...)
		}
		return 0, err
	}
	return count, nil
}
`
}

func (r *Repo) genCreateTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type CreateData struct {
	tx        *query.Query
	qTx       *query.QueryTx
	values    []*{{.ModelName}}.{{.StructName}}
	batchSize int
}

func NewCreateData() *CreateData {
	return &CreateData{}
}

func (c *CreateData) SetTx(tx *query.Query) *CreateData {
	c.tx = tx
	c.qTx = nil
	return c
}

// SetQueryTx 设置为手动事务
func (c *CreateData) SetQueryTx(tx *query.QueryTx) *CreateData {
	c.qTx = tx
	c.tx = nil
	return c
}

func (c *CreateData) SetValues(values ...*{{.ModelName}}.{{.StructName}}) *CreateData {
	c.values = values
	return c
}

func (c *CreateData) SetBatchSize(batchSize uint) *CreateData {
	c.batchSize = int(batchSize)
	return c
}

// Create 添加数据
func ({{.Abbr}} *{{.StructName}}) Create(ctx context.Context, cd *CreateData) (err error) {
	length := len(cd.values)
	if length == 0 {
		return nil
	}
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if cd.tx != nil {
		{{.Abbr}}q = cd.tx.{{.StructName}}
	}
	if cd.qTx != nil {
		{{.Abbr}}q = cd.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	errFields := make([]zap.Field, 0)
	if length > 1 && cd.batchSize > 0 {
		errFields = append(errFields, zap.Int("batchSize", cd.batchSize))
		err = {{.Abbr}}r.CreateInBatches(cd.values, cd.batchSize)
	} else {
		err = {{.Abbr}}r.Create(cd.values...)
	}
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Any("values", cd.values))
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Create】失败", errFields...)
		}
		return err
	}
	return nil
}
`
}

func (r *Repo) genDeleteTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
    "gorm.io/gen"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type DeleteData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	conditionOpts []Option
}

func NewDeleteData() *DeleteData {
	return &DeleteData{
		conditionOpts: make([]Option, 0),
	}
}

func (d *DeleteData) SetTx(tx *query.Query) *DeleteData {
	d.tx = tx
	d.qTx = nil
	return d
}

// SetQueryTx 设置为手动事务
func (d *DeleteData) SetQueryTx(tx *query.QueryTx) *DeleteData {
	d.qTx = tx
	d.tx = nil
	return d
}

func (d *DeleteData) SetConditionOpts(opts ...Option) *DeleteData {
	d.conditionOpts = opts
	return d
}

// Delete 删除数据
func ({{.Abbr}} *{{.StructName}}) Delete(ctx context.Context, dd *DeleteData) (int64, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if dd.tx != nil {
		{{.Abbr}}q = dd.tx.{{.StructName}}
	}
	if dd.qTx != nil {
		{{.Abbr}}q = dd.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	errFields := make([]zap.Field, 0)
	if len(dd.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(dd.conditionOpts))
		for _, opt := range dd.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	res, err := {{.Abbr}}r.Delete()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Delete】失败", errFields...)
		}
		return 0, err
	}
	return res.RowsAffected, nil
}
`
}

func (r *Repo) genFirstTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type FirstData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	forUpdate     bool
	relationOpts  []RelationOption
	conditionOpts []Option
}

func NewFirstData() *FirstData {
	return &FirstData{
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]Option, 0),
	}
}

func (f *FirstData) SetTx(tx *query.Query) *FirstData {
	f.tx = tx
	f.qTx = nil
	return f
}

// SetQueryTx 设置为手动事务
func (f *FirstData) SetQueryTx(tx *query.QueryTx) *FirstData {
	f.qTx = tx
	f.tx = nil
	return f
}

func (f *FirstData) SetForUpdate(forUpdate bool) *FirstData {
	f.forUpdate = forUpdate
	return f
}

func (f *FirstData) SetRelationOpts(opts ...RelationOption) *FirstData {
	f.relationOpts = opts
	return f
}

func (f *FirstData) SetConditionOpts(opts ...Option) *FirstData {
	f.conditionOpts = opts
	return f
}

// First 获取首条数据
func ({{.Abbr}} *{{.StructName}}) First(ctx context.Context, fd *FirstData) (*{{.ModelName}}.{{.StructName}}, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if fd.tx != nil {
		{{.Abbr}}q = fd.tx.{{.StructName}}
	}
	if fd.qTx != nil {
		{{.Abbr}}q = fd.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if (fd.tx != nil || fd.qTx != nil) && fd.forUpdate {
		{{.Abbr}}r = {{.Abbr}}r.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(fd.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(fd.conditionOpts))
		for _, opt := range fd.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	if len(fd.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(fd.relationOpts))
		for _, opt := range fd.relationOpts {
			relations = append(relations, opt({{.Abbr}}))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			{{.Abbr}}r = {{.Abbr}}r.Preload(relations...)
		}
	}
	res, err := {{.Abbr}}r.First()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.First】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
`
}

func (r *Repo) genLastTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type LastData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	forUpdate     bool
	relationOpts  []RelationOption
	conditionOpts []Option
}

func NewLastData() *LastData {
	return &LastData{
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]Option, 0),
	}
}

func (l *LastData) SetTx(tx *query.Query) *LastData {
	l.tx = tx
	l.qTx = nil
	return l
}

// SetQueryTx 设置为手动事务
func (l *LastData) SetQueryTx(tx *query.QueryTx) *LastData {
	l.qTx = tx
	l.tx = nil
	return l
}

func (l *LastData) SetForUpdate(forUpdate bool) *LastData {
	l.forUpdate = forUpdate
	return l
}

func (l *LastData) SetRelationOpts(opts ...RelationOption) *LastData {
	l.relationOpts = opts
	return l
}

func (l *LastData) SetConditionOpts(opts ...Option) *LastData {
	l.conditionOpts = opts
	return l
}

// Last 获取最后一条数据
func ({{.Abbr}} *{{.StructName}}) Last(ctx context.Context, ld *LastData) (*{{.ModelName}}.{{.StructName}}, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if ld.tx != nil {
		{{.Abbr}}q = ld.tx.{{.StructName}}
	}
	if ld.qTx != nil {
		{{.Abbr}}q = ld.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if (ld.tx != nil || ld.qTx != nil) && ld.forUpdate {
		{{.Abbr}}r = {{.Abbr}}r.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(ld.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(ld.conditionOpts))
		for _, opt := range ld.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	if len(ld.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(ld.relationOpts))
		for _, opt := range ld.relationOpts {
			relations = append(relations, opt({{.Abbr}}))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			{{.Abbr}}r = {{.Abbr}}r.Preload(relations...)
		}
	}
	res, err := {{.Abbr}}r.Last()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Last】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
`
}

func (r *Repo) genListTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin. DO NOT EDIT.

package {{.Package}}

import (
	"context"

    "github.com/gorm-gen/plugin/paginate"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type ListData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	page          int
	pageSize      int
	forUpdate     bool
	relationOpts  []RelationOption
	orderOpts     []OrderOption
	conditionOpts []Option
}

func NewListData() *ListData {
	return &ListData{
		relationOpts:  make([]RelationOption, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]Option, 0),
	}
}

func (l *ListData) SetTx(tx *query.Query) *ListData {
	l.tx = tx
	l.qTx = nil
	return l
}

// SetQueryTx 设置为手动事务
func (l *ListData) SetQueryTx(tx *query.QueryTx) *ListData {
	l.qTx = tx
	l.tx = nil
	return l
}

func (l *ListData) SetForUpdate(forUpdate bool) *ListData {
	l.forUpdate = forUpdate
	return l
}

func (l *ListData) SetRelationOpts(opts ...RelationOption) *ListData {
	l.relationOpts = opts
	return l
}

func (l *ListData) SetOrderOpts(opts ...OrderOption) *ListData {
	l.orderOpts = opts
	return l
}

func (l *ListData) SetConditionOpts(opts ...Option) *ListData {
	l.conditionOpts = opts
	return l
}

func (l *ListData) SetPage(page, pageSize uint) *ListData {
	l.page = int(page)
	l.pageSize = int(pageSize)
	return l
}

// List 获取数据列表
func ({{.Abbr}} *{{.StructName}}) List(ctx context.Context, ld *ListData) ([]*{{.ModelName}}.{{.StructName}}, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if ld.tx != nil {
		{{.Abbr}}q = ld.tx.{{.StructName}}
	}
	if ld.qTx != nil {
		{{.Abbr}}q = ld.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if (ld.tx != nil || ld.qTx != nil) && ld.forUpdate {
		{{.Abbr}}r = {{.Abbr}}r.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(ld.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(ld.conditionOpts))
		for _, opt := range ld.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	if len(ld.orderOpts) > 0 {
		orders := make([]field.Expr, 0, len(ld.orderOpts))
		for _, opt := range ld.orderOpts {
			orders = append(orders, opt({{.Abbr}}))
		}
		if len(orders) > 0 {
			errFields = append(errFields, zap.Any("orders", orders))
			{{.Abbr}}r = {{.Abbr}}r.Order(orders...)
		}
	}
	if ld.page > 0 && ld.pageSize > 0 {
		errFields = append(errFields, zap.Int("page", ld.page))
		errFields = append(errFields, zap.Int("pageSize", ld.pageSize))
		{{.Abbr}}r = {{.Abbr}}r.Scopes(paginate.Gen(ld.page, ld.pageSize))
	}
	if len(ld.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(ld.relationOpts))
		for _, opt := range ld.relationOpts {
			relations = append(relations, opt({{.Abbr}}))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			{{.Abbr}}r = {{.Abbr}}r.Preload(relations...)
		}
	}
	list, err := {{.Abbr}}r.Find()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.List】失败", errFields...)
		}
		return nil, err
	}
	return list, nil
}
`
}
