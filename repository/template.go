package repository

func (r *Repository) baseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"errors"
	"sync"

	"gorm.io/gorm"

	"{{.GormDBVarPkg}}"

	"{{.GenQueryPkg}}"
)

var once sync.Once
var q *query.Query

func GetQuery() *query.Query {
	once.Do(func() {
		q = query.Use({{.GormDBVar}})
	})
	return q
}

// IsRealErr 是否为非超时和查询不到的错误
func IsRealErr(err error) bool {
	return !errors.Is(err, gorm.ErrRecordNotFound) &&
		!errors.Is(err, context.DeadlineExceeded) &&
		!errors.Is(err, context.Canceled)
}
`
}

func (r *Repository) genBaseTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
{{range .Imports}}{{.}}{{end}}
)

// {{.StructName}} 仓库/Repository
type {{.StructName}} struct {
	q            *query.Query
	db           *gorm.DB
	logger       *zap.Logger
	newTableName *string
}

// Option {{.StructName}}仓库初始化选项
type Option func(*{{.StructName}})

func WithQuery(q *query.Query) Option {
	return func({{.Abbr}} *{{.StructName}}) {
		{{.Abbr}}.q = q
	}
}

func WithLogger(logger *zap.Logger) Option {
	return func({{.Abbr}} *{{.StructName}}) {
		{{.Abbr}}.logger = logger
	}
}

func WithDB(db *gorm.DB) Option {
	return func({{.Abbr}} *{{.StructName}}) {
		{{.Abbr}}.db = db
	}
}

func WithNewTableName(newTableName string) Option {
	return func({{.Abbr}} *{{.StructName}}) {
		{{.Abbr}}.newTableName = &newTableName
	}
}

// New {{.StructName}}仓库初始化
func New(opts ...Option) *{{.StructName}} {
	{{.Abbr}} := &{{.StructName}}{
		q:      {{.RepoPkgName}}.GetQuery(),
		db:     {{.GormDBVar}},
		logger: {{.ZapVar}},
	}
	for _, opt := range opts {
		opt({{.Abbr}})
	}
	return {{.Abbr}}
}

// ConditionOption 字段条件筛选选项
type ConditionOption func(*{{.StructName}}) gen.Condition

// Condition 自定义字段条件筛选
func Condition(condition gen.Condition) ConditionOption {
	return func(*{{.StructName}}) gen.Condition {
		return condition
	}
}
{{range .Conditions}}{{.}}{{end}}
// UpdateOption 数据更新选项
type UpdateOption func(*{{.StructName}}) field.AssignExpr

// Update 自定义数据更新
func Update(update field.AssignExpr) UpdateOption {
    return func(*{{.StructName}}) field.AssignExpr {
        return update
    }
}
{{range .Updates}}{{.}}{{end}}
// OrderOption 数据排序选项
type OrderOption func(*{{.StructName}}) field.Expr

// Order 自定义数据排序
func Order(order field.Expr) OrderOption {
    return func(*{{.StructName}}) field.Expr {
        return order
    }
}
{{range .Orders}}{{.}}{{end}}
// RelationOption 关联模型预加载选项
type RelationOption func(*{{.StructName}}) field.RelationField

// Relation 自定义关联模型预加载
func Relation(relation field.RelationField) RelationOption {
	return func(*{{.StructName}}) field.RelationField {
		return relation
	}
}

func RelationAll() RelationOption {
	return func(*{{.StructName}}) field.RelationField {
		return field.Associations
	}
}
`
}

func (r *Repository) genCountTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type Count struct {
	core          *{{.StructName}}
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	conditionOpts []ConditionOption
}

func ({{.Abbr}} *{{.StructName}}) Count() *Count {
	return &Count{
		core:          {{.Abbr}},
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (c *Count) SetTx(tx *query.Query) *Count {
	c.tx = tx
	c.qTx = nil
	return c
}

// SetQueryTx 设置为手动事务
func (c *Count) SetQueryTx(tx *query.QueryTx) *Count {
	c.qTx = tx
	c.tx = nil
	return c
}

func (c *Count) SetUnscoped() *Count {
	c.unscoped = true
	return c
}

func (c *Count) SetConditionOpts(opts ...ConditionOption) *Count {
	c.conditionOpts = append(c.conditionOpts, opts...)
	return c
}

// Do 获取数据总条数
func (c *Count) Do(ctx context.Context) (int64, error) {
	cq := c.core.q.{{.StructName}}
	if c.tx != nil {
		cq = c.tx.{{.StructName}}
	}
	if c.qTx != nil {
		{{.Abbr}}q = c.qTx.{{.StructName}}
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if len(c.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(c.conditionOpts))
		for _, opt := range c.conditionOpts {
			conditions = append(conditions, opt(c.core))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			cr = cr.Where(conditions...)
		}
	}
	count, err := cr.Count()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			c.core.logger.Error("【{{.StructName}}.Count】失败", errFields...)
		}
		return 0, err
	}
	return count, nil
}
`
}

func (r *Repository) genCreateTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type Create struct {
	core      *{{.StructName}}
	tx        *query.Query
	qTx       *query.QueryTx
	unscoped  bool
	values    []*{{.ModelName}}.{{.StructName}}
	batchSize int
}

func ({{.Abbr}} *{{.StructName}}) Create() *Create {
	return &Create{
		core: {{.Abbr}},
	}
}

// SetTx 设置为事务
func (c *Create) SetTx(tx *query.Query) *Create {
	c.tx = tx
	c.qTx = nil
	return c
}

// SetQueryTx 设置为手动事务
func (c *Create) SetQueryTx(tx *query.QueryTx) *Create {
	c.qTx = tx
	c.tx = nil
	return c
}

func (c *Create) SetUnscoped() *Create {
	c.unscoped = true
	return c
}

func (c *Create) SetValues(values ...*{{.ModelName}}.{{.StructName}}) *Create {
	c.values = append(c.values, values...)
	return c
}

// SetBatchSize 设置当批量插入时指定创建的数量
func (c *Create) SetBatchSize(batchSize uint) *Create {
	c.batchSize = int(batchSize)
	return c
}

// Do 添加数据
func (c *Create) Do(ctx context.Context) (err error) {
	length := len(c.values)
	if length == 0 {
		return nil
	}
	cq := c.core.q.{{.StructName}}
	if c.tx != nil {
		cq = c.tx.{{.StructName}}
	}
	if c.qTx != nil {
		cq = c.qTx.{{.StructName}}
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if length > 1 && c.batchSize > 0 {
		errFields = append(errFields, zap.Int("batchSize", c.batchSize))
		err = cr.CreateInBatches(c.values, c.batchSize)
	} else {
		err = cr.Create(c.values...)
	}
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Any("values", c.values))
			errFields = append(errFields, zap.Error(err))
			c.core.logger.Error("【{{.StructName}}.Create】失败", errFields...)
		}
		return err
	}
	return nil
}
`
}

func (r *Repository) genDeleteTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
    "gorm.io/gen"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type Delete struct {
	core          *{{.StructName}}
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	conditionOpts []ConditionOption
}

func ({{.Abbr}} *{{.StructName}}) Delete() *Delete {
	return &Delete{
		core:          {{.Abbr}},
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (d *Delete) SetTx(tx *query.Query) *Delete {
	d.tx = tx
	d.qTx = nil
	return d
}

// SetQueryTx 设置为手动事务
func (d *Delete) SetQueryTx(tx *query.QueryTx) *Delete {
	d.qTx = tx
	d.tx = nil
	return d
}

func (d *Delete) SetUnscoped() *Delete {
	d.unscoped = true
	return d
}

func (d *Delete) SetConditionOpts(opts ...ConditionOption) *Delete {
	d.conditionOpts = append(d.conditionOpts, opts...)
	return d
}

// Do 删除数据
func (d *Delete) Do(ctx context.Context) (int64, error) {
	dq := d.core.q.{{.StructName}}
	if d.tx != nil {
		dq = d.tx.{{.StructName}}
	}
	if d.qTx != nil {
		dq = d.qTx.{{.StructName}}
	}
	dr := dq.WithContext(ctx)
	if d.core.newTableName != nil && *d.core.newTableName != "" {
		dr = dq.Table(*d.core.newTableName).WithContext(ctx)
	}
	if d.unscoped {
		dr = dr.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if len(d.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(d.conditionOpts))
		for _, opt := range d.conditionOpts {
			conditions = append(conditions, opt(d.core))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			dr = dr.Where(conditions...)
		}
	}
	res, err := dr.Delete()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			d.core.logger.Error("【{{.StructName}}.Delete】失败", errFields...)
		}
		return 0, err
	}
	return res.RowsAffected, nil
}
`
}

func (r *Repository) genFirstTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type First struct {
	core          *{{.StructName}}
	tx            *query.Query
	qTx           *query.QueryTx
	forUpdate     bool
	unscoped      bool
	relationOpts  []RelationOption
	conditionOpts []ConditionOption
}

func ({{.Abbr}} *{{.StructName}}) First() *First {
	return &First{
		core:          {{.Abbr}},
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (f *First) SetTx(tx *query.Query) *First {
	f.tx = tx
	f.qTx = nil
	return f
}

// SetQueryTx 设置为手动事务
func (f *First) SetQueryTx(tx *query.QueryTx) *First {
	f.qTx = tx
	f.tx = nil
	return f
}

func (f *First) SetForUpdate(forUpdate bool) *First {
	f.forUpdate = forUpdate
	return f
}

func (f *First) SetUnscoped() *First {
	f.unscoped = true
	return f
}

func (f *First) SetRelationOpts(opts ...RelationOption) *First {
	f.relationOpts = append(f.relationOpts, opts...)
	return f
}

func (f *First) SetConditionOpts(opts ...ConditionOption) *First {
	f.conditionOpts = append(f.conditionOpts, opts...)
	return f
}

// Do 获取首条数据
func (f *First) Do(ctx context.Context) (*{{.ModelName}}.{{.StructName}}, error) {
	fq := f.core.q.{{.StructName}}
	if f.tx != nil {
		fq = f.tx.{{.StructName}}
	}
	if f.qTx != nil {
		fq = f.qTx.{{.StructName}}
	}
	fr := fq.WithContext(ctx)
	if f.core.newTableName != nil && *f.core.newTableName != "" {
		fr = fq.Table(*f.core.newTableName).WithContext(ctx)
	}
	if f.unscoped {
		fr = fr.Unscoped()
	}
	if (f.tx != nil || f.qTx != nil) && f.forUpdate {
		fr = fr.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(f.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(f.conditionOpts))
		for _, opt := range f.conditionOpts {
			conditions = append(conditions, opt(f.core))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			fr = fr.Where(conditions...)
		}
	}
	if len(f.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(f.relationOpts))
		for _, opt := range f.relationOpts {
			relations = append(relations, opt(f.core))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			fr = fr.Preload(relations...)
		}
	}
	res, err := fr.First()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			f.core.logger.Error("【{{.StructName}}.First】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
`
}

func (r *Repository) genLastTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type Last struct {
	core          *{{.StructName}}
	tx            *query.Query
	qTx           *query.QueryTx
	forUpdate     bool
	unscoped      bool
	relationOpts  []RelationOption
	conditionOpts []ConditionOption
}

func ({{.Abbr}} *{{.StructName}}) Last() *Last {
	return &Last{
		core:          {{.Abbr}},
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (l *Last) SetTx(tx *query.Query) *Last {
	l.tx = tx
	l.qTx = nil
	return l
}

// SetQueryTx 设置为手动事务
func (l *Last) SetQueryTx(tx *query.QueryTx) *Last {
	l.qTx = tx
	l.tx = nil
	return l
}

func (l *Last) SetForUpdate(forUpdate bool) *Last {
	l.forUpdate = forUpdate
	return l
}

func (l *Last) SetUnscoped() *Last {
	l.unscoped = true
	return l
}

func (l *Last) SetRelationOpts(opts ...RelationOption) *Last {
	l.relationOpts = append(l.relationOpts, opts...)
	return l
}

func (l *Last) SetConditionOpts(opts ...ConditionOption) *Last {
	l.conditionOpts = append(l.conditionOpts, opts...)
	return l
}

// Do 获取最后一条数据
func (l *Last) Do(ctx context.Context) (*{{.ModelName}}.{{.StructName}}, error) {
	lq := l.core.q.{{.StructName}}
	if l.tx != nil {
		lq = l.tx.{{.StructName}}
	}
	if l.qTx != nil {
		lq = l.qTx.{{.StructName}}
	}
	lr := lq.WithContext(ctx)
	if l.core.newTableName != nil && *l.core.newTableName != "" {
		lr = lq.Table(*l.core.newTableName).WithContext(ctx)
	}
	if l.unscoped {
		lr = lr.Unscoped()
	}
	if (l.tx != nil || l.qTx != nil) && l.forUpdate {
		lr = lr.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(l.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(l.conditionOpts))
		for _, opt := range l.conditionOpts {
			conditions = append(conditions, opt(l.core))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			lr = lr.Where(conditions...)
		}
	}
	if len(l.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(l.relationOpts))
		for _, opt := range l.relationOpts {
			relations = append(relations, opt(l.core))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			lr = lr.Preload(relations...)
		}
	}
	res, err := lr.Last()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			l.core.logger.Error("【{{.StructName}}.Last】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
`
}

func (r *Repository) genListTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

    "github.com/gorm-gen/plugin/paginate"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type ListData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	page          int
	pageSize      int
	forUpdate     bool
	unscoped      bool
	relationOpts  []RelationOption
	orderOpts     []OrderOption
	conditionOpts []ConditionOption
}

func NewListData() *ListData {
	return &ListData{
		relationOpts:  make([]RelationOption, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (l *ListData) SetTx(tx *query.Query) *ListData {
	l.tx = tx
	l.qTx = nil
	return l
}

// SetQueryTx 设置为手动事务
func (l *ListData) SetQueryTx(tx *query.QueryTx) *ListData {
	l.qTx = tx
	l.tx = nil
	return l
}

func (l *ListData) SetForUpdate(forUpdate bool) *ListData {
	l.forUpdate = forUpdate
	return l
}

func (l *ListData) SetUnscoped() *ListData {
	l.unscoped = true
	return l
}

func (l *ListData) SetRelationOpts(opts ...RelationOption) *ListData {
	l.relationOpts = append(l.relationOpts, opts...)
	return l
}

func (l *ListData) SetOrderOpts(opts ...OrderOption) *ListData {
	l.orderOpts = append(l.orderOpts, opts...)
	return l
}

func (l *ListData) SetConditionOpts(opts ...ConditionOption) *ListData {
	l.conditionOpts = append(l.conditionOpts, opts...)
	return l
}

func (l *ListData) SetPage(page, pageSize uint) *ListData {
	l.page = int(page)
	l.pageSize = int(pageSize)
	return l
}

// List 获取数据列表
func ({{.Abbr}} *{{.StructName}}) List(ctx context.Context, ld *ListData) ([]*{{.ModelName}}.{{.StructName}}, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if ld.tx != nil {
		{{.Abbr}}q = ld.tx.{{.StructName}}
	}
	if ld.qTx != nil {
		{{.Abbr}}q = ld.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if {{.Abbr}}.newTableName != nil && *{{.Abbr}}.newTableName != "" {
		{{.Abbr}}r = {{.Abbr}}q.Table(*{{.Abbr}}.newTableName).WithContext(ctx)
	}
	if ld.unscoped {
		{{.Abbr}}r = {{.Abbr}}r.Unscoped()
	}
	if (ld.tx != nil || ld.qTx != nil) && ld.forUpdate {
		{{.Abbr}}r = {{.Abbr}}r.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(ld.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(ld.conditionOpts))
		for _, opt := range ld.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	if len(ld.orderOpts) > 0 {
		orders := make([]field.Expr, 0, len(ld.orderOpts))
		for _, opt := range ld.orderOpts {
			orders = append(orders, opt({{.Abbr}}))
		}
		if len(orders) > 0 {
			errFields = append(errFields, zap.Any("orders", orders))
			{{.Abbr}}r = {{.Abbr}}r.Order(orders...)
		}
	}
	if ld.page > 0 && ld.pageSize > 0 {
		errFields = append(errFields, zap.Int("page", ld.page))
		errFields = append(errFields, zap.Int("pageSize", ld.pageSize))
		{{.Abbr}}r = {{.Abbr}}r.Scopes(paginate.Gen(ld.page, ld.pageSize))
	}
	if len(ld.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(ld.relationOpts))
		for _, opt := range ld.relationOpts {
			relations = append(relations, opt({{.Abbr}}))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			{{.Abbr}}r = {{.Abbr}}r.Preload(relations...)
		}
	}
	list, err := {{.Abbr}}r.Find()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.List】失败", errFields...)
		}
		return nil, err
	}
	return list, nil
}
`
}

func (r *Repository) genTakeTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"

    "{{.ModelPkg}}"
)

type TakeData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	forUpdate     bool
	unscoped      bool
	relationOpts  []RelationOption
	orderOpts     []OrderOption
	conditionOpts []ConditionOption
}

func NewTakeData() *TakeData {
	return &TakeData{
		relationOpts:  make([]RelationOption, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

// SetTx 设置为事务
func (t *TakeData) SetTx(tx *query.Query) *TakeData {
	t.tx = tx
	t.qTx = nil
	return t
}

// SetQueryTx 设置为手动事务
func (t *TakeData) SetQueryTx(tx *query.QueryTx) *TakeData {
	t.qTx = tx
	t.tx = nil
	return t
}

func (t *TakeData) SetForUpdate(forUpdate bool) *TakeData {
	t.forUpdate = forUpdate
	return t
}

func (t *TakeData) SetUnscoped() *TakeData {
	t.unscoped = true
	return t
}

func (t *TakeData) SetRelationOpts(opts ...RelationOption) *TakeData {
	t.relationOpts = append(t.relationOpts, opts...)
	return t
}

func (t *TakeData) SetOrderOpts(opts ...OrderOption) *TakeData {
	t.orderOpts = append(t.orderOpts, opts...)
	return t
}

func (t *TakeData) SetConditionOpts(opts ...ConditionOption) *TakeData {
	t.conditionOpts = append(t.conditionOpts, opts...)
	return t
}

// Take 获取一条数据
func ({{.Abbr}} *{{.StructName}}) Take(ctx context.Context, td *TakeData) (*{{.ModelName}}.{{.StructName}}, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if td.tx != nil {
		{{.Abbr}}q = td.tx.{{.StructName}}
	}
	if td.qTx != nil {
		{{.Abbr}}q = td.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if {{.Abbr}}.newTableName != nil && *{{.Abbr}}.newTableName != "" {
		{{.Abbr}}r = {{.Abbr}}q.Table(*{{.Abbr}}.newTableName).WithContext(ctx)
	}
	if td.unscoped {
		{{.Abbr}}r = {{.Abbr}}r.Unscoped()
	}
	if (td.tx != nil || td.qTx != nil) && td.forUpdate {
		{{.Abbr}}r = {{.Abbr}}r.Clauses(clause.Locking{Strength: "UPDATE"})
	}
	errFields := make([]zap.Field, 0)
	if len(td.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(td.conditionOpts))
		for _, opt := range td.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	if len(td.orderOpts) > 0 {
		orders := make([]field.Expr, 0, len(td.orderOpts))
		for _, opt := range td.orderOpts {
			orders = append(orders, opt({{.Abbr}}))
		}
		if len(orders) > 0 {
			errFields = append(errFields, zap.Any("orders", orders))
			{{.Abbr}}r = {{.Abbr}}r.Order(orders...)
		}
	}
	if len(td.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(td.relationOpts))
		for _, opt := range td.relationOpts {
			relations = append(relations, opt({{.Abbr}}))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			{{.Abbr}}r = {{.Abbr}}r.Preload(relations...)
		}
	}
	res, err := {{.Abbr}}r.Take()
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Take】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
`
}

func (r *Repository) genUpdateTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"{{.GenQueryPkg}}"

    "{{.RepoPkg}}"
)

type UpdateData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	updateOpts    []UpdateOption
	conditionOpts []ConditionOption
}

func NewUpdateData() *UpdateData {
	return &UpdateData{
		updateOpts:    make([]UpdateOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

func (u *UpdateData) SetTx(tx *query.Query) *UpdateData {
	u.tx = tx
	u.qTx = nil
	return u
}

// SetQueryTx 设置为手动事务
func (u *UpdateData) SetQueryTx(tx *query.QueryTx) *UpdateData {
	u.qTx = tx
	u.tx = nil
	return u
}

func (u *UpdateData) SetUnscoped() *UpdateData {
	u.unscoped = true
	return u
}

func (u *UpdateData) SetUpdateOpts(opts ...UpdateOption) *UpdateData {
	u.updateOpts = append(u.updateOpts, opts...)
	return u
}

func (u *UpdateData) SetConditionOpts(opts ...ConditionOption) *UpdateData {
	u.conditionOpts = append(u.conditionOpts, opts...)
	return u
}

// Update 更新数据
func ({{.Abbr}} *{{.StructName}}) Update(ctx context.Context, ud *UpdateData) (int64, error) {
	if len(ud.updateOpts) == 0 {
		return 0, nil
	}
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if ud.tx != nil {
		{{.Abbr}}q = ud.tx.{{.StructName}}
	}
	if ud.qTx != nil {
		{{.Abbr}}q = ud.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx)
	if {{.Abbr}}.newTableName != nil && *{{.Abbr}}.newTableName != "" {
		{{.Abbr}}r = {{.Abbr}}q.Table(*{{.Abbr}}.newTableName).WithContext(ctx)
	}
	if ud.unscoped {
		{{.Abbr}}r = {{.Abbr}}r.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if len(ud.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(ud.conditionOpts))
		for _, opt := range ud.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	columns := make([]field.AssignExpr, 0, len(ud.updateOpts))
	for _, opt := range ud.updateOpts {
		columns = append(columns, opt({{.Abbr}}))
	}
	if len(columns) == 0 {
		return 0, nil
	}
	res, err := {{.Abbr}}r.UpdateSimple(columns...)
	if err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.Any("columns", columns))
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Update】失败", errFields...)
		}
		return 0, err
	}
	return res.RowsAffected, nil
}
`
}

func (r *Repository) genSumTemplate() string {
	return `// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	f "github.com/gorm-gen/plugin/field"
	"github.com/shopspring/decimal"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"{{.GenQueryPkg}}"

	"{{.RepoPkg}}"
)

type SumData struct {
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	genField      field.Field
	conditionOpts []ConditionOption
}

func NewSumData(genField field.Field) *SumData {
	return &SumData{
		genField: genField,
		conditionOpts: make([]ConditionOption, 0),
	}
}

func (s *SumData) SetTx(tx *query.Query) *SumData {
	s.tx = tx
	s.qTx = nil
	return s
}

// SetQueryTx 设置为手动事务
func (s *SumData) SetQueryTx(tx *query.QueryTx) *SumData {
	s.qTx = tx
	s.tx = nil
	return s
}

func (s *SumData) SetUnscoped() *SumData {
	s.unscoped = true
	return s
}

func (s *SumData) SetConditionOpts(opts ...ConditionOption) *SumData {
	s.conditionOpts = append(s.conditionOpts, opts...)
	return s
}
` + "\ntype Sum struct {\n    Sum decimal.Decimal `json:\"sum\"`\n}\n\n" + `// Update SUM数据
func ({{.Abbr}} *{{.StructName}}) Sum(ctx context.Context, sd *SumData) (decimal.Decimal, error) {
	{{.Abbr}}q := {{.Abbr}}.q.{{.StructName}}
	if sd.tx != nil {
		{{.Abbr}}q = sd.tx.{{.StructName}}
	}
	if sd.qTx != nil {
		{{.Abbr}}q = sd.qTx.{{.StructName}}
	}
	{{.Abbr}}r := {{.Abbr}}q.WithContext(ctx).Select(sd.genField.Sum().As("sum"))
	if {{.Abbr}}.newTableName != nil {
		cf := f.NewDecimal(sd.genField, f.WithTableName(*{{.Abbr}}.newTableName)).Sum().As("sum")
		{{.Abbr}}r = {{.Abbr}}q.WithContext(ctx).Select(cf)
		if *{{.Abbr}}.newTableName != "" {
			{{.Abbr}}r = {{.Abbr}}q.Table(*{{.Abbr}}.newTableName).WithContext(ctx).Select(cf)
		}
	}
	if sd.unscoped {
		{{.Abbr}}r = {{.Abbr}}r.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if len(sd.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(sd.conditionOpts))
		for _, opt := range sd.conditionOpts {
			conditions = append(conditions, opt({{.Abbr}}))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			{{.Abbr}}r = {{.Abbr}}r.Where(conditions...)
		}
	}
	var data Sum
	if err := {{.Abbr}}r.Scan(&data); err != nil {
		if {{.RepoPkgName}}.IsRealErr(err) {
			errFields = append(errFields, zap.String("field", sd.genField.ColumnName().String()))
			errFields = append(errFields, zap.Error(err))
			{{.Abbr}}.logger.Error("【{{.StructName}}.Sum】失败", errFields...)
		}
		return decimal.Zero, err
	}
	return data.Sum, nil
}
`
}
